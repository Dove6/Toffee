init a = 5, b = 10, c;

// dopasowanie wzorca działa jak wyrażenie
// możliwe jest porównanie z typem (is, is not) oraz literałem (is, is not, <, <=, >, >=)
init const matchingExample = functi(var) {
    match(var) {
        is null:        "Wartość null";
        is 5:           "Dokładnie pięć";
        is int and > 8: "Liczba całkowita większa od 8";
        default:        "Brak dopasowania";
    }
}

print(a);  // "Dokładnie pięć"
print(b);  // "Liczba całkowita większa od 8"
print(c);  // "Wartość null"
print("5");  // "Brak dopasowania"


// konstrukcja match pozwala również na skorzystanie z predykatu - funkcji jednoargumentowej, której wynik będzie rzutowany do typu bool
init const isOdd = functi(num) num % 2;

init const predicateMatchingExample = functi(var) match(var) {
    is int and isOdd: "Liczba nieparzysta";
    is int:           "Liczba";
    default:          "???";
};

print(5);  // "Liczba nieparzysta"
print(7);  // "Liczba nieparzysta"
print(4);  // "Liczba"
print("osiem");  // "???"
