// wszystkie funkcje są potencjalnymi domknięciami, można również definiować funkcje wyższego rzędu

init add = functi(a, b) { a + b };
print(add(3, 8));  // 11

// słowo kluczowe return może być podane bez wyrażenia (zostaje zwrócony null) lub z wyrażeniem
init const fib = functi(n) {
    if (n < 0) { return; };
    if (n == 0) { return 0; };
    if (n == 1) { return(1); };
    fib(n - 2) + fib(n - 1)
};
print(fib(4));  // 3

// funkcja ze sprawdzaniem, czy argument nie jest nullem
init printRequired = functi(x!) {
    print(x);
};
printRequired(5);  // 5 - OK
// printRequired(null);  // błąd!

// przykład funkcji z niemutowalnym oraz z mutowalnym parametrem
init const recursiveFactorial = functi(const n) { if (n > 0) n * recursiveFactorial(n - 1) else 1 };
print(recursiveFactorial(5));

init const iterativeFactorial = functi(n) {
    init result = 1;
    while (n > 0) {
        result *= n;
        n -= 1;
    };
    return(result);
};
print(iterativeFactorial(5));

init const dontDoThis = functi(const n) { n = 5 };
// dontDoThis(6);  // błąd
